const route = require('./route')
// const adminUtil = require('./util')
const { attributeComponentMap, associationComponentMap } = require('./constants')

class Admin {
  constructor(options = {}) {
    this.data = []
    this.map = {}
    this.middleware = options.middleware
    this.router = route(options.router, this)
  }

  register(Model, adminConfig = {}) {
    adminConfig = this.normalizeConfig(Model, adminConfig)

    const key = Model.name
    const config = {
      Model,
      key,
      name: adminConfig.name || Model.options.name.plural,
      admin: adminConfig
    }

    this.data.push(config)
    this.map[key] = config
  }

  getAttributeComponent(attribute) {
    for (let t in attributeComponentMap) {
      const dataTypes = attributeComponentMap[t]
      for (let i = 0; i < dataTypes.length; i++) {
        if (attribute.type instanceof dataTypes[i]) {
          return t
        }
      }
    }

    return 'input'
  }

  getAttributes(Model) {
    const attributes = Model.getAttributes()
    const ret = {}

    for (let i in attributes) {
      const attribute = attributes[i]

      if (!attribute._autoGenerated) {
        const item = {
          component: this.getAttributeComponent(attribute),
          required: !attribute.allowNull,
        }

        if (attribute.defaultValue !== undefined) {
          item.defaultValue = attribute.defaultValue 
        }

        if (attribute.values) {
          item.options = attribute.values.map(item => {
            return {
              name: item,
              value: item
            }
          })
        }

        ret[i] = item
      }
    }

    return ret
  }

  /**
   * adminConfig需要序列化给前端
   */
  normalizeConfig(Model, adminConfig) {
    const { primaryKeyAttribute } = Model
    const attributes = this.getAttributes(Model)

    adminConfig = Object.assign({
      primaryKey: {
        fieldName: primaryKeyAttribute,
        autoIncrement: Model.primaryKeys[primaryKeyAttribute].autoIncrement
      },
      // 如何展示一个对象
      format: `{{ ${primaryKeyAttribute} }}`,
      fields: {},
      listFields: Object.keys(attributes),
      filterFields: [],
      searchFields: [],
      associations: {}
    }, adminConfig)

    adminConfig.fields = this.normalizeFields(Model, adminConfig.fields)
    return adminConfig
  }

  normalizeFields(Model, fieldsConfig) {
    const attributes = this.getAttributes(Model)

    for (let i in fieldsConfig) {
      const item = fieldsConfig[i]
      const field = typeof item === 'string' ? { name: item } : item || {}

      attributes[i] = Object.assign({}, attributes[i], field)

      if (typeof attributes[i].format === 'string') {
        attributes[i].format = {
          type: attributes[i].format
        }
      }
    }

    return attributes
  }

  initAssociations() {
    this.data.map(config => {
      const associations = config.Model.associations
      const adminConfig = config.admin

      for (let i in associations) {
        const association = associations[i]
        const { associationType, target } = association
        const targetConfig = this.getConfig(target.name)
        
        if (!targetConfig) {
          continue
        }
  
        adminConfig.associations[i] = {
          type: associationType,
          component: associationComponentMap[associationType],
          options: [],
          name: targetConfig.name,
          format: targetConfig.admin.format
        }
      }
    })
  }

  getConfig(key) {
    return key ? this.map[key] : this.data
  }
}

module.exports = Admin
